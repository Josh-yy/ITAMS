<?php
@session_start();

require("../assets/settings/db_conn.php");
require("../assets/settings/functions.php");
include('../assets/libs/phpqrcode/qrlib.php');
$newdate = date('Y-m-d h:i:s');
$code = $_POST['code'];
$name = $_POST['name'];
$serial_number = $_POST['serial_number'];
$date_purchased = $_POST['date_purchased'];
$ltype = $_POST['ltype'];
$assetcat = $_POST['assetcat'];
$expiration_date = $_POST['expiration_date'];
$qr_code = $db->sanitize(encrypt($code));

	if(get_exist2("select * from m_software_assets where code = '$code' or serial_number = '$serial_number' or software_name='$name'",$db)>0){
		echo 1;
	}else{ 	
	    
	       $activity =  $_SESSION['data']['account_name'] . " Added a software asset with a serial number of" . $serial_number;
                activity_log_maker("Add",$activity,$_SESSION['data']['account_id'],$db);
		$sql  ="insert into m_software_assets values (id, '$code','$name','$serial_number','$date_purchased','$expiration_date','$ltype','$assetcat','$qr_code','$newdate','".$_SESSION['data']['account_id']."')";
		$db->query($sql);
		//create_qrcode($qr_code,"../assets/img/qr_codes/",$qr_code,$db);
	
		echo 0;
	}

function create_qrcode($code,$path,$name,$db)
    {
         //$this->load->library('Qrcode');
        $value = $code;//QR code content
        $errorCorrectionLevel = 'H';  //Fault tolerance level
        $matrixPointSize = 10;      //Generate picture size

        //Generate QR code picture
        if(!file_exists($path)){
            mkdir($path, 0700,true);
        }
        $time = $name . '.png';//Generated QR code file name
        $fileName = $path.$time;//1. Path of QR code file generated by assembly
        QRcode::png($value,$fileName , $errorCorrectionLevel, $matrixPointSize, 2);
        $logo = '../assets/images/' . get_column2("logo","select * from system_settings",$db); //logo picture ready
        $QR = $fileName;                //Generated original QR code picture file
        if (file_exists($logo)) {
            $QR = imagecreatefromstring(file_get_contents($QR));    //Target image connection resource.
            $logo = imagecreatefromstring(file_get_contents($logo));  //Source image connection resource.
            $QR_width = imagesx($QR);      //QR code picture width
            $QR_height = imagesy($QR);     //QR code image height
            $logo_width = imagesx($logo);    //logo picture width
            $logo_height = imagesy($logo);   //logo image height
            $logo_qr_width = $QR_width / 4;   //Width of logo after combination (1 / 5 of QR code)
            $scale = $logo_width/$logo_qr_width;  //Width scaling ratio of logo (own width / combined width)
            $logo_qr_height = $logo_height/$scale; //Height of logo after combination
            $from_width = ($QR_width - $logo_qr_width) / 2;  //Coordinate point of upper left corner of logo after combination
            //Recombine and resize pictures
            /*
             * imagecopyresampled() Copy a square area from one image (source image) to another
             */
            imagecopyresampled($QR, $logo, $from_width, $from_width, 0, 0, $logo_qr_width,$logo_qr_height, $logo_width, $logo_height);
        }
        //Output pictures
        $time =$name . '.png';//Generated QR code file name
        $logo_img_path = $path.$time; 
        imagepng($QR, $logo_img_path);
        imagedestroy($QR);
    }
?>